// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Directory {
  public static partial class Directory
  {
    static readonly string __ServiceName = "Directory.Directory";

    static readonly grpc::Marshaller<global::Directory.ID> __Marshaller_Directory_ID = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Directory.ID.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Directory.Player> __Marshaller_Directory_Player = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Directory.Player.Parser.ParseFrom);

    static readonly grpc::Method<global::Directory.ID, global::Directory.Player> __Method_GetPlayer = new grpc::Method<global::Directory.ID, global::Directory.Player>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPlayer",
        __Marshaller_Directory_ID,
        __Marshaller_Directory_Player);

    static readonly grpc::Method<global::Directory.Player, global::Directory.Player> __Method_UpdatePlayer = new grpc::Method<global::Directory.Player, global::Directory.Player>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePlayer",
        __Marshaller_Directory_Player,
        __Marshaller_Directory_Player);

    static readonly grpc::Method<global::Directory.Player, global::Directory.Player> __Method_CreatePlayer = new grpc::Method<global::Directory.Player, global::Directory.Player>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePlayer",
        __Marshaller_Directory_Player,
        __Marshaller_Directory_Player);

    static readonly grpc::Method<global::Directory.ID, global::Directory.ID> __Method_DeletePlayer = new grpc::Method<global::Directory.ID, global::Directory.ID>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePlayer",
        __Marshaller_Directory_ID,
        __Marshaller_Directory_ID);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Directory.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Directory</summary>
    [grpc::BindServiceMethod(typeof(Directory), "BindService")]
    public abstract partial class DirectoryBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Directory.Player> GetPlayer(global::Directory.ID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Directory.Player> UpdatePlayer(global::Directory.Player request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Directory.Player> CreatePlayer(global::Directory.Player request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Directory.ID> DeletePlayer(global::Directory.ID request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Directory</summary>
    public partial class DirectoryClient : grpc::ClientBase<DirectoryClient>
    {
      /// <summary>Creates a new client for Directory</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DirectoryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Directory that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DirectoryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DirectoryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DirectoryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Directory.Player GetPlayer(global::Directory.ID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Directory.Player GetPlayer(global::Directory.ID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPlayer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> GetPlayerAsync(global::Directory.ID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPlayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> GetPlayerAsync(global::Directory.ID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPlayer, null, options, request);
      }
      public virtual global::Directory.Player UpdatePlayer(global::Directory.Player request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Directory.Player UpdatePlayer(global::Directory.Player request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePlayer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> UpdatePlayerAsync(global::Directory.Player request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePlayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> UpdatePlayerAsync(global::Directory.Player request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePlayer, null, options, request);
      }
      public virtual global::Directory.Player CreatePlayer(global::Directory.Player request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePlayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Directory.Player CreatePlayer(global::Directory.Player request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePlayer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> CreatePlayerAsync(global::Directory.Player request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePlayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.Player> CreatePlayerAsync(global::Directory.Player request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePlayer, null, options, request);
      }
      public virtual global::Directory.ID DeletePlayer(global::Directory.ID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Directory.ID DeletePlayer(global::Directory.ID request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePlayer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.ID> DeletePlayerAsync(global::Directory.ID request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Directory.ID> DeletePlayerAsync(global::Directory.ID request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePlayer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DirectoryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DirectoryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DirectoryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPlayer, serviceImpl.GetPlayer)
          .AddMethod(__Method_UpdatePlayer, serviceImpl.UpdatePlayer)
          .AddMethod(__Method_CreatePlayer, serviceImpl.CreatePlayer)
          .AddMethod(__Method_DeletePlayer, serviceImpl.DeletePlayer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DirectoryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetPlayer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Directory.ID, global::Directory.Player>(serviceImpl.GetPlayer));
      serviceBinder.AddMethod(__Method_UpdatePlayer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Directory.Player, global::Directory.Player>(serviceImpl.UpdatePlayer));
      serviceBinder.AddMethod(__Method_CreatePlayer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Directory.Player, global::Directory.Player>(serviceImpl.CreatePlayer));
      serviceBinder.AddMethod(__Method_DeletePlayer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Directory.ID, global::Directory.ID>(serviceImpl.DeletePlayer));
    }

  }
}
#endregion
