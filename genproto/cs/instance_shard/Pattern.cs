// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Pattern.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Deviant {

  /// <summary>Holder for reflection information generated from Pattern.proto</summary>
  public static partial class PatternReflection {

    #region Descriptor
    /// <summary>File descriptor for Pattern.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PatternReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QYXR0ZXJuLnByb3RvEgdEZXZpYW50Gg9EaXJlY3Rpb24ucHJvdG8iQQoG",
            "T2Zmc2V0EiUKCWRpcmVjdGlvbhgBIAEoDjISLkRldmlhbnQuRGlyZWN0aW9u",
            "EhAKCGRpc3RhbmNlGAIgASgFImMKB1BhdHRlcm4SJQoJZGlyZWN0aW9uGAEg",
            "ASgOMhIuRGV2aWFudC5EaXJlY3Rpb24SEAoIZGlzdGFuY2UYAiABKAUSHwoG",
            "b2Zmc2V0GAMgAygLMg8uRGV2aWFudC5PZmZzZXRCC1oJLjtkZXZpYW50YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Deviant.DirectionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Deviant.Offset), global::Deviant.Offset.Parser, new[]{ "Direction", "Distance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Deviant.Pattern), global::Deviant.Pattern.Parser, new[]{ "Direction", "Distance", "Offset" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Offset : pb::IMessage<Offset> {
    private static readonly pb::MessageParser<Offset> _parser = new pb::MessageParser<Offset>(() => new Offset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Offset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deviant.PatternReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offset(Offset other) : this() {
      direction_ = other.direction_;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Offset Clone() {
      return new Offset(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Deviant.Direction direction_ = global::Deviant.Direction.Up;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Deviant.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private int distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Offset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Offset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Direction != other.Direction) return false;
      if (Distance != other.Distance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Direction != global::Deviant.Direction.Up) hash ^= Direction.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Direction != global::Deviant.Direction.Up) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Direction);
      }
      if (Distance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Direction != global::Deviant.Direction.Up) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Offset other) {
      if (other == null) {
        return;
      }
      if (other.Direction != global::Deviant.Direction.Up) {
        Direction = other.Direction;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Direction = (global::Deviant.Direction) input.ReadEnum();
            break;
          }
          case 16: {
            Distance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pattern : pb::IMessage<Pattern> {
    private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deviant.PatternReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern(Pattern other) : this() {
      direction_ = other.direction_;
      distance_ = other.distance_;
      offset_ = other.offset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern Clone() {
      return new Pattern(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Deviant.Direction direction_ = global::Deviant.Direction.Up;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Deviant.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private int distance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Deviant.Offset> _repeated_offset_codec
        = pb::FieldCodec.ForMessage(26, global::Deviant.Offset.Parser);
    private readonly pbc::RepeatedField<global::Deviant.Offset> offset_ = new pbc::RepeatedField<global::Deviant.Offset>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Deviant.Offset> Offset {
      get { return offset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Direction != other.Direction) return false;
      if (Distance != other.Distance) return false;
      if(!offset_.Equals(other.offset_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Direction != global::Deviant.Direction.Up) hash ^= Direction.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      hash ^= offset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Direction != global::Deviant.Direction.Up) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Direction);
      }
      if (Distance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Distance);
      }
      offset_.WriteTo(output, _repeated_offset_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Direction != global::Deviant.Direction.Up) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pattern other) {
      if (other == null) {
        return;
      }
      if (other.Direction != global::Deviant.Direction.Up) {
        Direction = other.Direction;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      offset_.Add(other.offset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Direction = (global::Deviant.Direction) input.ReadEnum();
            break;
          }
          case 16: {
            Distance = input.ReadInt32();
            break;
          }
          case 26: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
